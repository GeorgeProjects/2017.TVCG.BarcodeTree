// Generated by CoffeeScript 1.6.3
(function() {
  var deep, puts, _,
    __slice = [].slice;

  _ = require('underscore');

  puts = require('util').puts;

  deep = {
    isPlainObject: function(obj) {
      if ((obj != null ? obj.constructor : void 0) == null) {
        return false;
      }
      return obj.constructor.name === 'Object';
    },
    clone: function(obj) {
      var clone, k, v, _i, _len;
      if (_.isArray(obj)) {
        clone = [];
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          v = obj[_i];
          clone.push(deep.clone(v));
        }
        return clone;
      } else if (deep.isPlainObject(obj)) {
        clone = {};
        for (k in obj) {
          v = obj[k];
          clone[k] = deep.clone(v);
        }
        return clone;
      } else {
        return obj;
      }
    },
    equals: function(a, b) {
      var i, k, size_a, _i, _ref;
      if (a === b) {
        return true;
      } else if (_.isArray(a)) {
        if (!(_.isArray(b) && a.length === b.length)) {
          return false;
        }
        for (i = _i = 0, _ref = a.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (!deep.equals(a[i], b[i])) {
            return false;
          }
        }
        return true;
      } else if (deep.isPlainObject(a)) {
        size_a = _.size(a);
        if (!(deep.isPlainObject(b) && size_a === _.size(b))) {
          return false;
        }
        for (k in a) {
          if (!deep.equals(a[k], b[k])) {
            return false;
          }
        }
        return true;
      } else {
        return false;
      }
    },
    extend: function() {
      var destination, k, source, sources, _i, _len;
      destination = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      for (_i = 0, _len = sources.length; _i < _len; _i++) {
        source = sources[_i];
        for (k in source) {
          if (deep.isPlainObject(destination[k]) && deep.isPlainObject(source[k])) {
            deep.extend(destination[k], source[k]);
          } else {
            destination[k] = deep.clone(source[k]);
          }
        }
      }
      return destination;
    },
    select: function(root, filter, path) {
      var elementPath, k, selected, v;
      if (path == null) {
        path = [];
      }
      selected = [];
      if (filter(root)) {
        selected.push({
          path: path,
          value: root
        });
      } else if (_.isObject(root)) {
        for (k in root) {
          v = root[k];
          elementPath = _.clone(path);
          elementPath.push(k);
          selected = selected.concat(deep.select(v, filter, elementPath));
        }
      }
      return selected;
    },
    set: function(root, path, value) {
      var lastPath, pathElement, _i, _len;
      path = _.clone(path);
      lastPath = path.pop();
      for (_i = 0, _len = path.length; _i < _len; _i++) {
        pathElement = path[_i];
        root = root[pathElement];
      }
      return root[lastPath] = value;
    },
    transform: function(obj, filter, transform) {
      var k, transformed, v, _i, _len;
      if (filter(obj)) {
        return transform(obj);
      } else if (_.isArray(obj)) {
        transformed = [];
        for (_i = 0, _len = obj.length; _i < _len; _i++) {
          v = obj[_i];
          transformed.push(deep.transform(v, filter, transform));
        }
        return transformed;
      } else if (deep.isPlainObject(obj)) {
        transformed = {};
        for (k in obj) {
          v = obj[k];
          transformed[k] = deep.transform(v, filter, transform);
        }
        return transformed;
      } else {
        return obj;
      }
    }
  };

  module.exports = deep;

}).call(this);
